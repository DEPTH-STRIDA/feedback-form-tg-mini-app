package tg

import (
	"fmt"
	"nstu/internal/logger"
	"nstu/internal/model"
	"nstu/pkg/tg"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var (
	Bot *tg.Bot
)

type Config interface {
	GetToken() string
	GetExpiration() time.Duration
	GetCleanupInterval() time.Duration
	GetMessageChats() *[]int64
}

// updateHandler –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
func updateHandler() tg.HandlerFunc {
	return func(b *tg.Bot, u tgbotapi.Update) error {
		return nil
	}
}

func InitBot(config Config, newForms chan *model.Request) {

	bot, err := tg.NewBot(tg.Config{
		Token:           config.GetToken(),
		Expiration:      config.GetExpiration(),
		CleanupInterval: config.GetCleanupInterval(),
		States:          states,
		Logger:          &logger.Log,
		UpdateHandler:   updateHandler(),
	})
	if err != nil {
		logger.Log.Fatal().Err(err).Msg("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞")
	}
	Bot = bot

	go sendForm(config.GetMessageChats(), newForms)
}

func sendForm(chats *[]int64, newForms chan *model.Request) {
	for request := range newForms {
		message := formatMessage(request)
		for _, chatID := range *chats {
			msg := tgbotapi.MessageConfig{
				BaseChat: tgbotapi.BaseChat{
					ChatID: chatID,
				},
				Text: message,
			}
			msg.ParseMode = tgbotapi.ModeMarkdownV2

			_, err := Bot.SendMessage(msg)
			if err != nil {
				logger.Log.Error().Err(err).Msg("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
			}
		}
	}
}

func formatMessage(request *model.Request) string {
	var builder strings.Builder

	// –ó–∞–≥–æ–ª–æ–≤–æ–∫
	builder.WriteString("üìù *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\n\n")

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
	builder.WriteString(fmt.Sprintf("üë§ *–û—Ç:* %s", request.User.FirstName))
	if request.User.LastName != "" {
		builder.WriteString(" " + request.User.LastName)
	}
	if request.User.UserName != "" {
		builder.WriteString(fmt.Sprintf(" (@%s)", request.User.UserName))
	}
	builder.WriteString("\n\n")

	// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–∑ —Ñ–æ—Ä–º—ã
	builder.WriteString(fmt.Sprintf("üìã *–ò–º—è:* %s\n", request.Form.Name))

	// –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–æ—Å–æ–± –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω —É–∫–∞–∑–∞–Ω
	if request.Form.Feedback != "" {
		builder.WriteString(fmt.Sprintf("üìû *–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏:* %s\n", request.Form.Feedback))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
	if request.Form.Comment != "" {
		builder.WriteString(fmt.Sprintf("\nüí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:*\n%s\n", request.Form.Comment))
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è
	builder.WriteString(fmt.Sprintf("\nüïê *–í—Ä–µ–º—è:* %s", request.Form.UpdatedAt.UpdatedAt.Format("02.01.2006 15:04")))

	return builder.String()
}
